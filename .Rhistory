levels(shuttle$wind)
glm(shuttle$use ~ shuttle$wind, "binomial")
mod2 <- glm(shuttle$use ~ shuttle$wind, "binomial")
mod2
exp(mod2$coefficients)
head(shuttle)
mod2 <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, "binomial")
mod2
exp(mod2$coefficients)
levels(shuttle$magn)
shuttle$wind <- relevel(shuttle$wind, "head")
levels(shuttle$wind)
mod2 <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, "binomial")
exp(mod2$coefficients)
mod2 <- glm(shuttle$use ~ shuttle$wind * shuttle$magn, "binomial")
exp(mod2$coefficients)
mod
glm(1 - mod, "binomial")
glm(shuttle$use ~ 1 - mod, "binomial")
mod
?`recode
?recode
head(shuttle)
head(as.numeric(shuttle$use))
data(shuttle)
levels(shuttle$wind)
shuttle$wind <- relevel(shuttle$wind, "tail")
levels(shuttle$wind)
data(shuttle)
levels(shuttle$use)
shuttle$use <- relevel(shuttle$use, "noauto")
levels(shuttle$use)
glm(use ~ wind, "binary", shuttle)
glm(use ~ wind, shuttle, "binary")
glm(use ~ wind, shuttle, family = "binary")
glm(use ~ wind, data=shuttle, family = "binary")
glm(use ~ wind, data=shuttle, family="binary")
glm(use ~ wind, shuttle, "binomial")
glm(use ~ wind, data=shuttle, family="binomial")
mod
data(shuttle)
mod
glm(use ~ wind, data=shuttle, family="binomial")
data("InsectSprays")
head(InsectSprays)
glm(count ~ spray, data=InsectSprays, family="Poisson")
glm(count ~ spray, data=InsectSprays, family="poisson")
log(10)
log(12)
log(2)
df
data
dat
dat <- matrix(nrow=100, ncol=2)
?rep
head(dat)
head(rep(0,50))
dat[,1] <- c(rep(0,50), rep(1,50))
head(dat)
tail(dat)
50+rnorm()
50+rnorm(1)
?rnorm
dat[,2] <- c(rnorm(50,50), rnorm(50))
heat(dat)
head(dat)
tail(dat)
names(dat)
names(dat) <- c("one", "two")
names(dat)
names(dat) <- NULL
names(dat)
cnames
colnames
colnames(dat) <- c("one", "two")
names(dat)
head(dat)
mod(one ~ two, data=dat, family="binomial")
glm(one ~ two, data=dat, family="binomial")
dat <- data.frame(dat)
head(Dat)
head(dat)
glm(one ~ two, data=dat, family="binomial")
glm(one ~ two, data=dat, family="poisson")
glm(one ~ I(two+log(10)), data=dat, family="poisson")
glm(one ~ I(two+log(15)), data=dat, family="poisson")
glm(one ~ I(two+log(1500)), data=dat, family="poisson")
dat2 <- data.frame(nrow=3, ncol=2)
dat2
data.frame("one", "two")
data.frame()
dat <- data.frame()
dat[,1] <- c(rep(0,50), rep(1,50))
head(dat)
?data.frame
x <- c(rep(0,50), rep(1,50))
y <- c(rnorm(50,50), rnorm(50))
dat <- data.frame(x,y)
head(dat)
glm(x ~ y, data=dat, family="poisson")
x <- c(rep(0,50), rep(1,50))
y <- c(rnorm(50,50), rnorm(50))
dat <- data.frame(y,x)
glm(y ~ x, data=dat, family="poisson")
x <- c(rep(0,50), rep(1,50))
y <- c(rnorm(50,50), rnorm(50))
dat <- data.frame(y,x)
glm(y ~ x, data=dat, family="poisson")
head(dat)
y <- c(rep(0,50), rep(1,50))
x <- c(rnorm(50,50), rnorm(50))
dat <- data.frame(y,x)
glm(y ~ x, data=dat, family="poisson")
glm(y ~ x, data=dat, family="poisson")$coef
glm(y ~ x, data=dat, family="poisson")$coef
glm(y ~ x+log(10), data=dat, family="poisson")$coef
glm(y ~ x+log(15), data=dat, family="poisson")$coef
glm(y ~ x, data=dat, family="poisson")$coef
glm(y ~ I(x+log(10)), data=dat, family="poisson")$coef
glm(y ~ I(x+log(15)), data=dat, family="poisson")$coef
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
?spline
spline(x, y, n=1)
spline(x, y, n=1, xout=1)
spline(x, y, n=1, xout=2)
spline(x, y, n=1, xout=5)
spline(x, y, n=1)
spline(x, y)
spline(x, y, n=1, xout=1:5)
spline(x, y, n=10)
spline(x, y, n=1)
splinefun(x, y, n=1)
splinefun(x, y)
xMat <- cbind(1, x, 0)
xMat
yhat <- predict(lm(y ~ xMat - 1))
yhat
plot(x, y, frame=FALSE, pch=21, bg="lightblue", cex=2)
lines(x, yhat, col="red", lwd=2)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
splineTerms
xMat <- cbind(1, x, splineTerms)
xMat
yhat <- predict(lm(y ~ xMat - 1))
yhat
plot(x, y, frame=FALSE, pch=21, bg="lightblue", cex=2)
lines(x, yhat, col="red", lwd=2)
lm(y ~ xMat)
yhat <- predict(lm(y ~ xMat - 1),1)
yhat
?predict
exp(-0.056)
library(MASS)
data(shuttle)
mod <- glm(shuttle$use ~ shuttle$wind, "binomial")
mod
data(InsectSprays)
mod <- glm(count ~ spray, data=InsectSprays, family="poisson")
mod
exp(0.05588)
exp(-mod$coefficients)
library(MASS)
data(shuttle)
mod <- glm(shuttle$use ~ shuttle$wind, "binomial")
mod
exp(mod$coefficients)
mod <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, "binomial")
mod
exp(mod)
exp(mod$coefficients)
mod <- glm(shuttle$use ~ shuttle$wind, "binomial")
exp(mod$coef)
mod$coefficients
?step
rm()
?rm
rm(*)
ls()
rm(ls())
rm(list=ls())
data(mtcars)
step(lm(mpg ~ ., cars), "both")
step(lm(mpg ~ ., mtcars), "both")
step(lm(mpg ~ ., mtcars), direction="both")
anova(lm(mpg ~ wt, mtcars), lm(mpg ~ wt + qsec, mtcars), lm(mpg ~ wt + qsec + am, mtcars))
anova(lm(mpg ~ wt, mtcars), lm(mpg ~ wt + qsec, mtcars), lm(mpg ~ wt + qsec + am, mtcars), lm(mpg ~ wt + qsec + am + hp, mtcars))
?mtcars
step(lm(mpg ~ ., mtcars), direction="backward")
step(lm(mpg ~ ., mtcars), direction="both")
step(lm(mpg ~ ., mtcars), direction="forward")
?step
step(lm(mpg ~ ., mtcars), direction="backward")
install.packages(c("car", "class", "curl", "evaluate", "foreign", "formatR", "highr", "jsonlite", "knitr", "lme4", "MASS", "mime", "nlme", "nnet", "quantreg", "R6", "raster", "Rcpp", "RcppEigen", "rmarkdown", "scales", "sp", "SparseM", "spatial", "usdm"))
install.packages(c("car", "class", "curl", "evaluate", "foreign",
"formatR", "highr", "jsonlite", "knitr", "lme4", "MASS", "mime", "nlme", "nnet", "quantreg", "R6", "raster", "Rcpp", "RcppEigen", "rmarkdown", "scales", "sp", "SparseM", "spatial", "usdm"))
install.packages(c("car", "class", "curl", "evaluate", "foreign",
))
install.packages(c("car", "class", "curl", "evaluate", "foreign"))
install.packages(c("formatR", "highr", "jsonlite", "knitr", "lme4", "MASS", "mime"))
install.packages(c("nlme", "nnet", "quantreg", "R6", "raster", "Rcpp", "RcppEigen", "rmarkdown", "scales", "sp", "SparseM", "spatial", "usdm"))
install.packages(c("raster", "sp"))
sudo install.packages(c("raster", "sp"))
install.packages(c("raster", "sp"))
install.packages(c("raster", "sp"))
install.packages(c("raster", "sp"))
setwd("~/iCloud Drive/Coursera/JHU Data Specialization/8 - Practical Machine Learning/Quizzes")
install.packages(c("AppliedPredictiveModeling", "caret", "ElemStatLearn", "pgmm", "rpart"))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
?createDataPartition
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.70, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
names(segmentationOriginal)
modFit <- train(Case ~ ., method="rpart", data=training)
install.packages("e1071")
modFit <- train(Case ~ ., method="rpart", data=training)
print(modFit$finalModel)
library(rattle)
install.packages("rattle")
fancyRpartPlot(modFit$finalModel)
library(rattle)
library(RGtk2)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
print(modFit$finalModel)
names(segmentationOriginal)
unique(segmentationOriginal$Case)
training <- segmentationOriginal[Case==Train, -Case]
training <- segmentationOriginal[segmentationOriginal$Case==Train, -Case]
training <- segmentationOriginal[segmentationOriginal$Case==Train, -segmentationOriginal$Case]
training <- segmentationOriginal[segmentationOriginal$Case==Train, -2]
training <- segmentationOriginal[segmentationOriginal$Case=="Train", -2]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test", -2]
names(testing)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.70, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Case ~ ., method="rpart", data=training)
modFit$finalModel
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
modFit <- train(Case ~ ., method="rpart", data=training)
training <- segmentationOriginal[inTrain,]
modFit <- train(Case ~ ., method="rpart", data=training)
modFit$finalModel
training <- segmentationOriginal[segmentationOriginal$Case=="Train", -2]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test", -2]
modFit <- train(Cell ~ ., method="rpart", data=training)
modFit$finalModel
head(segmentationOriginal$Cell)
names(segmentationOriginal)
head(segmentationOriginal)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit$finalModel
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
tree()
?tree
??tree
install.packages("tree")
library(tree)
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
tree()
?tree
tree(Area ~ ., data=newdata)
predict(tree(Area ~ ., data=newdata), data=newdata)
predict(tree(Area ~ ., data=olive), data=newdata)
modFit
predict(modFit, data=newdata)
predict(modFit$finalModel, data=newdata)
newdata
tree(Area ~ ., data=olive)
treeFit <- tree(Area ~ ., data=olive)
treeFit
predict(treeFit, data=newdata)
predict(treeFit, data=newdata$Area)
newdata
tree
treeFit
newdata
tree(newdata)
tree(modFit$finalModel, newdata)
modfit$finalModel
modFit$finalModel
names(modFit)
names(olive)
tree(newdata[,-1])
predict(modFit, newdata)
modFit2 <- tree(Area ~ ., data=olive)
predict(modFit2, newdata)
predict(modFit, newdata)
modFit2
tree(modFit, newdata)
tree(modFit, data=newdata)
modFit2
mmodFit
modFit
modFit$finalModel
tree(Area ~ ., newdata)
tree(Area ~ ., newdata[,-1])
tree(Area ~ ., newdata)
predict(tree(Area ~ ., newdata), newdata)
predict(modFit$finalModel, newdata)
predict(tree(Area ~ ., newdata), newdata)
tree(Area ~ ., newdata)
tree(modFit, data=newdata)
predict(modFit2, newdata)
modFit2 <- tree(Area ~ ., data=olive)
predict(modFit2, newdata = newdata)
modFit <- train(Area ~ ., method="class", data=olive)
?rpart
modFit3 <- rpart(Area ~ ., data=olive, method="class")
modFit3
tree(modFit3, newdata)
predict(tree(modFit3, newdata), newdata)
predict(tree(modFit3, olive), newdata)
predict(tree(modFit3, olive), newdata[,-1])
predict(modFit3, newdata)
tree(modFit3)
predict(tree(modFit3), newdata)
predict(tree(modFit$finalModel), newdata)
set.seed(125)
predict(tree(modFit$finalModel), newdata)
predict(tree(modFit3), newdata)
tree(modFit3)
modFit3 <- rpart(Area ~ ., data=olive, method="class")
predict(tree(modFit3), newdata)
modFit <- train(Area ~ ., method="rpart", data=olive)
predict(modFit$finalModel, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(SAheart)
predictors <- c("age", "alcohol", "obesity", "tobacco", "typea", "ldl")
modFit <- glm(chd ~ predictors, family=binomial, data=trainSA)
predictors <- "age + alcohol + obesity + tobacco + typea + ldl")
predictors <- "age + alcohol + obesity + tobacco + typea + ldl"
modFit <- glm(chd ~ predictors, family=binomial, data=trainSA)
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial, data=trainSA)
prediction <- predict(modFit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
head(prediction)
missClass(testSA$chd, prediction)
missClass(trainSA$chd, prediction)
names(trainSA)
head(trainSA)
?glm
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial, data=trainSA, type= response)
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial, data=trainSA, typ="response"")
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial, data=trainSA, type="response"")
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial, data=trainSA, type="response")
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial, data=trainSA)
prediction <- predict(modFit, trainSA, type=predict)
prediction <- predict(modFit, trainSA, type="predict")
prediction <- predict(modFit, trainSA, type="response")
missClass(trainSA$chd, prediction)
prediction <- predict(modFit, testSA, type="response")
missClass(testSA$chd, prediction)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., data=vowel.train, method="rf", prox=TRUE)
?
set.seed(33833)
modFit <- train(y ~ ., data=vowel.train, method="rf", prox=TRUE)
modFit
?train
?varimp
?varImp
varImp(modFit)
modFit <- train(y ~ ., data=vowel.test, method="rf", prox=TRUE)
varImp(modFit)
prediction <- predict(modFit, trainSA, type="response")
missClass(trainSA$chd, prediction)
prediction <- predict(modFit, testSA, type="response")
missClass(testSA$chd, prediction)
prediction <- predict(modFit, testSA, class="response")
missClass(testSA$chd, prediction)
prediction <- predict(modFit, trainSA, class="response")
missClass(trainSA$chd, prediction)
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial, data=trainSA)
prediction <- predict(modFit, testSA, class="response")
missClass(testSA$chd, prediction)
prediction <- predict(modFit, trainSA, class="response")
missClass(trainSA$chd, prediction)
set.seed(13234)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial, data=trainSA)
prediction <- predict(modFit, testSA, class="response")
missClass(testSA$chd, prediction)
prediction <- predict(modFit, trainSA, class="response")
missClass(trainSA$chd, prediction)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family=binomial, data=trainSA)
prediction <- predict(modFit, testSA, class="response")
missClass(testSA$chd, prediction)
prediction <- predict(modFit, trainSA, class="response")
missClass(trainSA$chd, prediction)
prediction <- predict(modFit, testSA, type="response")
missClass(testSA$chd, prediction)
prediction <- predict(modFit, trainSA, type="response")
missClass(trainSA$chd, prediction)
library(pgmm)
data(olive)
olive = olive[,-1]
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit$finalModel, newdata)
set.seed(125)
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit$finalModel, newdata)
library(tree)
tree()
tree(modFit)
predict(tree(modFit), newdata = newdata)
modFit
modFit$finalModel
tree(Area ~ ., data=newdata)
predict(tree(Area ~ ., data=newdata))
predict(tree(modFit), newdata = newdata$Area)
predict(tree(Area ~ ., olive), newdata)
newdata
predict(modFit, newdata = newdata)
?olive
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit$finalModel, newdata)
setwd("~/iCloud Drive/Coursera/JHU Data Specialization/8 - Practical Machine Learning/Project")
pmlTrain <- read.csv("pml-training.csv")
head(pmlTrain)
names(pmlTrain)
unique(pmlTrain$classe)
pmlTest <- read.csv("pml-testing.csv")
class(pmlTrain$classe)
head(pmlTrain)
head(pmlTrain, 20)
head(pmlTrain)
unique(pmlTrain$stddev_pitch_forearm)
pmlTrainTrain <- createDataPartition(y=pmlTrain$classe, p=0.7, list=FALSE)
splitlist <- createDataPartition(y=pmlTrain$classe, p=0.7, list=FALSE)
pmlTrainTrain <- pmlTrain[splitlist,]
pmlTrainValid <- pmlTrain[-splitlist,]
modFit <- train(classe ~ ., pmlTrainTrain)
grep('^(max|kurtosis)', names(pmlTrain)
)
names(pmlTrain)
grep('^(total|kurtosis|skewness|max|min|amplitude|var|stddev)', names(pmlTrain)
)
grep('^(total|kurtosis|skewness|max|min|amplitude|var|stddev)', names(pmlTrain))
garbage <- grep('^(total|kurtosis|skewness|max|min|amplitude|var|stddev)', names(pmlTrain))
head(pmlTrain[,-garbage])
garbage <- grep('^(total|kurtosis|skewness|max|min|amplitude|var|stddev|avg)', names(pmlTrain))
head(pmlTrain[,-garbage])
head(pmlTrain[,-c(1:7, garbage)])
pmlTrain <- pmlTrain[,-c(1:7, garbage)]
pmlTest <- pmlTest[,-c(1:7, garbage)]
head(pmlTrain)
pmlTrainSub <- createDataPartition(y=pmlTrain$classe, p=0.7, list=FALSE)
head(pmlTrainSub)
trainSampe <- createDataPartition(y=pmlTrain$classe, p=0.7, list=FALSE)
head(createDataPartition(y=pmlTrain$classe, p=0.7, list=FALSE))
head(createDataPartition(y=pmlTrain$classe, p=0.7, list=TRUE))
trainSample <- createDataPartition(y=pmlTrain$classe, p=0.7, list=FALSE)
pmlTrainSub <- pmlTrain[trainSample,]
pmlTrainValid <- pmlTrain[-trainSample,]
modFit <- train(classe ~ ., method="rf", data=pmlTrainSub, prox=TRUE)
setwd("~/iCloud Drive/Coursera/JHU Data Specialization/8 - Practical Machine Learning/Project/Machine-Learning-Project")
confusionMatrix(modFit, pmlTrainValid$classe)
predictions <- predict(modFit, pmlTrainValid$classe)
predictions <- predict(modFit, pmlTrainValid)
confusionMatrix(predictions, pmlTrainValid$classe)
?rf.cv
?rfcv
?sample
?train
modFit
?train
seed
.libPaths()
trControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5)
modFit <- train(classe ~ ., method="rf", data=pmlTrainSub, prox=TRUE, trControl=trControl)
predictions <- predict(modFit, pmlTrainValid)
confusionMatrix(predictions, pmlTrainValid$classe)
varImpPlot(modFit)
varImpPlot(modFit$finalModel)
